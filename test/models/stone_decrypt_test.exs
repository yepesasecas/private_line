defmodule PrivateLine.StoneDecryptTest do
  use PrivateLine.ConnCase, async: true
  alias PrivateLine.StoneDecrypt

  setup_all do
    encrypted_stone = "recmLAWv9BxD7qPHlX6GDUqFYvKnCB31Nne5InprhVyUseb2bCIZL+Zd" <>
                       "HKm8l2j9EIiJKT9tIMCZU5OmSZ2i9oMZ8QwimAwEGGYG26ftbLdDvFt" <>
                       "iACetGfvGOxGPRZ2MSFFCmHuM8jZH42R1ho9TVqfzNC+WW7lJVN6D8W" <>
                       "pIzbIh919pDQRL/NdE9TFMXar59xafkjAlJbXe/K1/rjpxATTwf+guE" <>
                       "QqmZlErtzw/I9gAKjHxvcF+gf/wEFjSOANAAjBzQDGow42JNtU0wgi6" <>
                       "L40aguFXhD8QcNART54kHmSoGx7P1POm22dgJ+ZorT4g5s6DhFOUY1u" <>
                       "BxwN6MCURjg=="
    expected_stone = %{"billing_first_name" => "Rommel",
                        "billing_last_name" => "Samanez",
                         "billing_address1" => "tu casa dir",
                         "billing_address2" => "apto123",
                             "billing_city" => "Lima"}
    {:ok, encrypted_stone: encrypted_stone, expected_stone: expected_stone}
  end

  test "decrypt single part Stone", %{encrypted_stone: encrypted_stone, expected_stone: expected_stone} do
    {:ok, stone, _msg} = StoneDecrypt.decrypt(encrypted_stone)
    assert stone == expected_stone
  end

  test "decrypt multi part Stone", %{encrypted_stone: encrypted_stone, expected_stone: expected_stone} do
    {:ok, stone, _msg} = StoneDecrypt.decrypt(encrypted_stone)
    assert stone == expected_stone
  end

  test "unable to decode Base64 stone" do
    bad_base_64_encrypted_stone = ["___recmLAWv9BxD7qPHlX6GDUqFYvKnCB31Nne5InprhVyUseb2bCIZL+Zd" <>
                                   "HKm8l2j9EIiJKT9tIMCZU5OmSZ2i9oMZ8QwimAwEGGYG26ftbLdDvFt" <>
                                   "iACetGfvGOxGPRZ2MSFFCmHuM8jZH42R1ho9TVqfzNC+WW7lJVN6D8W" <>
                                   "pIzbIh919pDQRL/NdE9TFMXar59xafkjAlJbXe/K1/rjpxATTwf+guE" <>
                                   "QqmZlErtzw/I9gAKjHxvcF+gf/wEFjSOANAAjBzQDGow42JNtU0wgi6" <>
                                   "L40aguFXhD8QcNART54kHmSoGx7P1POm22dgJ+ZorT4g5s6DhFOUY1u" <>
                                   "BxwN6MCURjg=="]
    assert {:error, _stone, "unable to decode64"} = StoneDecrypt.decrypt(bad_base_64_encrypted_stone)
  end

  test "unable to decode JSON to Map Stone", %{encrypted_stone: encrypted_stone} do
    encrypted_stone = [encrypted_stone, encrypted_stone]
    assert {:error, _stone, "No valid JSON format"} = StoneDecrypt.decrypt(encrypted_stone)
  end

  test "decrypt multi stone" do
    encrypted_stone = ["WjFzTnZ1cDZ5ZElKZGYwcW9TL2cydXFWbmFmWVZoWlA4bHpUOXhRY2FSSnU2ZVg4VjBoYW9PL3pPeVpRNlJvYUNCSGpIV0pVeEtCbVp4SGdOOCBGUGV1WWhhSUI4ZGhSNHc5dHNadk9CYUlwaG9uL3NuZXN5MjBoUDFnUnBLdGpHUkU3ZEZwZkZmUFp5UGJIZzZ1ZWVWZlJ2aEp4YmxRMEh0Z1dveDhBV1VuU2FJcnltQWJ6N3JaV2IvVVVUMTVVdXUwdnlFeExQd1ZzNVQ1aHI1eW4xRUc5c1ZYIHpDaWJlTURTIEJVRnczUzdPaVVGUUxucTJrQ1pRSVlLS1J6dy9FWklYMjV3dGVRNUZMMmV4WHZ4VjhwZExCQjFQMENaQ2JLQm96cmlFVnU2SVZyYjU0UHh3Nlc5djFNdjhBWE1POEo3VzAxV2NsT0tqQTU1WVNRRTNBOj0=", "TFIzc1QyeW9oeTFobnk0b3dGQ2w2c0ZXelhqcWwxZXF3TU9ZTTNVTVpiQmxsdjRNb1daN3NYY0xLU2FlRlljTnBxYUQ4QVhIeG9oanBtNlF2cGVXSHdZcEQ5a0xwemZZWWtsSkFQeE1ta2I4MjJtRWhFa0RpcXZ2M1lCcmVJdmV6ZWU5QVI4enpaYzhGckUwUkNtQlhYT3Vtb2tJR2kzTkhFcklKTzZhVFZoSW5GaSBLR0pTS2RacG1NV3hDeSBtbmxZczQwU09NejNodHdOV2RpTTR0VDlxYndSajQxVWttdUx4aGc0L25Ca1V0WXFqcWJqTFBqaktGVzJIUTRkbElVajZEbGtCbXRJYXY1WE9HYkNrbXZ3cDBRN1ZCIEdrcUNETyA0dDZPNlI0R2FtV05ReGp4TVoweDVNeXZjWldEV2x3bGZoRUc3SkVwRyByMFAyUEZRPT0=", "cHRoY0cydDNYMHZJSHZ0MVByWUtiejhTUERzV2VudDhEZFR6eTJCdnQ3RXdmTnQ0ekVaWm43SHVCQ2YwTG8gZmRjU0c2LzZkekdDL0ZSOUhCU3htY2M4VmlHRzY2N0VXSUNsclBQajk2eXhrWWhmM3ZyVmVZU0J5dTlBN1h5dFVIQVNUSmJrNVdzbVRtM1FTdGxLR3k0dWtaU0xZOGpSTS9JZ1BMaTBEcVJkMGFFb2hRVyAydHlzdDd4bXJMallDcjVrRmgwOFlyV0VHIGE4OCB6SGVrcHpJQXk0U0djUFFIU1h4Z3FwQUxsY1ZUSEwwcmUvRDZzazNWSFVYMXQwYSBxbm5mODY2QVRqU3ZVdHExWTRSRlVndXJDdVE1VmFERmsyMUlPUmcySW94eHY0Nlgzd2p4V0VWQ3dxQWlIL0ZHaEh4cW5sYzJ1OEM0IG5EVzBJL1B3PT0=", "bkpJM25sYXBPWXM5YVhJYVhyblM4ZVZwZFV6WjhsMndNMDNvTUFmN2o4RkE0U094cUVhNEVxcmJFdGYgSkU2YnpFeEpFeWZXR0I5WnpBUENadFBCVTYwUThnRkZnZWYyZFFMM1Z5WkFOek8wbTZlMUdHbmtpdFhTVktJODVWYlg1a2JEVmluNnhKcTF3OXRxSUpQZkZPZHZueFhkVUJLalBWamNmaWVyNm9sRHpSL3Y2RmUwNFhudk5mN2pubVJBUCBwVmZYMWhQcSBsZ3BrQnhSMDE5T1MyTWZhQ0RLL0ggZUVmZmNYeGtyYnhyOVJiby9HWXN2WUVmb3hsai9EeUFmUGxRSHd2UmlvMlIyOExIR2xueCBNaXM2MnRKWTk3RCBmdnU1aUxnM3FPcUE4IDVyNjJWRmlLZjVsWWNRazZLSjdGS2tGTjlVZXRadS9pL3h4enJnPT0=", "by9wMXMwcWZXSjFMY2RvR0F4cDNwaU9zR3lEY1JVeExHRGdldUxQNW5pdXE4WVV0c2V0TzVyVkRSQXF3MDlGWFJvd3FDaFBmVnpSc2w4ekVUR2xublZZZ1VwaSBoTHRxblZjMkNSby9lY3JtclVaWmoxbUpTYmJZL3VDVkRERGJFc0RRbFoyemRXS1FUWHZnUjZ0bmV5OVliZGR6MGlHbkw1WERjeFBBbFpLUGogR1BybnBXdnhGNi9INDVhWnI5eld2MlJGOHZSRVRhYkgydUxrelllT2xOcUhxZDV2cWo5RENHS2pVd1g0MXhRRERmU3huc1dib043b1BicVN6T1M5TlI2b1o4UnYzZkdsNnJCL1Y4cWYxV1QvT1pVWlNpNldOU0tQTEJCR3hWbTBOVkZvRHhOazJMUDBYMzNMRFpLUVhaIDFtcjB6Z3hCaDRLSzFqU0J3PT0=", "Rmk5bGxuZVZ3MTRSdVdhSkpmMlA3d284WHNBbkpkalN2YzFMa3dxOUw1MmlsQlVTQUFWdVBZM3JNMW1UeWFHSTFrUmN6R1JBREFsNEdzZXowNjJTV3hFeXhSVnMwdEpmZW5jMThNalIxYkVpMWxUSHVwd1A3TkZPdGVoN21GNktYZVk2c2dxVldqUGp1ZUFRaSBkQSBIdmVFemxSQXo1eUt2NmRCSlM0RkRPMlJYZTVvaUJjTXpUcHZOSFBMbkw4azBad0lRTS9XdDhSc0xwQSBvSVdXOHU4IEpYWnUzUm1aUHV1ZzV2MWxXU0NETkRJSVZPbzZmNGJIMUZJMWJlYnNROUpCbXRiaHp2bjg3RS8yVFJsOG8gN201bHAzbGZMIFhhWWRwdDRyamF5eVRyTmJCVEtiWjBpNEZSY0ZzbDViVFQgRlcwWUZYWVRaNEwwZCBnVWJnPT0=", "ZjdKa09kMXBkT2U4Tk9YVlBXb2FlMEVHRk53MWQxZTUwZXQ3bFNMcnl4WiBtb1IvSG4gYi8yTkZETWsySDdtMWhZT0QvY1B2bE5WNTVUMnZDdVZFZ2t6MXpoN0lYWDhCb3Q2N25OaHNMc0lFVEEyR2ZVV0lyTFEybDJuOVA3Q2swc1Z1R0k0NXA3eVJ1MVNhbVFYZU0gZS8vREZ5UmFOeWFPZmNUa1NuYyBxRUhxTWJhMm1YUjIzTXBIbDRyZHJhS0s2SXNHd0dFNUpWeTRYc0pIVHA2MThqeWxzVTV0U3BYZDZnV0ZKIDJjZGo5ZC9IQmU2M0ZJS29NNGE1UHNhd2xRTDhVZEtIYk5UWTA1a2QwakhtR0MzRG5XYURRcGJPckxlN0dPYUdZOU5pQW9pa1JoUnpMa3dXOVV4dW5mNnA0cExIaHNvNjlFNDF4SnVUQTMvRU1RPT0=", "b1lmZ3piVUhLRzRPSWpyc2I5VDcvWVdlc1NKZ1hTNlBERFB3UTFiVkloL3EydGF6QU85T3ZBU0Judi84aFVrU3h5UDQ5YmQyOEZiSGRGckhNQmF1VHVlNHlsdm4zOEs5ZHFxRHJzNjNDbWxodDJvNjcgZ2oxbjlUWVEwbmJKWnAvZUdqNmtKMDBMZ2tSaElzMUN0NFJPRVhlWkZKSEtVMUNLVFliQUx4T29CbU1vYUtDR3IwY0l5MjZXaFJhZ2I2TjQ2S2lFR0JVTmpRbXdFbUhzQ2g4M3kxQTI1Q2ZCZkNpT0xucTQ3L2RmTHpzUXBvQ2JSVjVENURNRjdxc1o0c1NkeXAvUVJlb1RRRk1pN0tqYTIyd1k1NmxkQklzY2MvU2YydXNJVGxqT01LVDUxUUtxWE1GeGY0YXd1bVAgbjd4Y0JodUh4IENhbUYgYVpkTGZUaFN3PT0=", "Qk00ZXc5dE1xWHlOcWExREsybm9vV3B0akpseWVYRWZkemR3anlrL1QxMUdzWWYwMUJyZDZ6VFYzLzFXeS9TOWNIS25kcXY5VCBJZ1FTRDdpMGxzUlZhM1JsakRvYk9Oc2Zka0F3WWFHZHoyN3k0ZndlM0Z5UXIwZnRnTVJmUkRJM3pidHggSnphbi9HaFhTMGI0U0ltZm1jN1hneHRKdUxmY3kyWXk5VVNGZ1FjcTNhZWVCRXNjdVBRRmRvcHo1N21Db3NVNlRPaWk1STdqNTdpeHpENWk2M2k2QU5YZCBtYlJTMU9qYU40WHFpQnZMSDBVQ1RPb2dGOS80dDNhS2xmcHlIM3ZnSUdZMVUwbWtVWlFydDVkdDRtRjFlMzJ1NWtxS2c1UFZNSktZeHBpVTM5SFB2TlM3aXhKSUVJN3NGRHJxWEpOa0FzQnpBNmp1bm9mNEVBPT0=", "a0ZKOWFZcElXeWdEZDRJTkhuNGEgREogTUdDTVBvdlFPVFVYNlYzYVpGVDVIeDRkczNHL0hyIG9uZ1BIRUZybllzYnFEQ1YxRkYgYW9odnhHZ3g5d3FoV2dBeFhkR3JWZ2psc0l2TTZmbnUwTHBGYlNDOTFCcE44dTZUZEliTUgxSU15Q0hBV1ZkTC9Vd3RldXBtVXNWTDM4blpJS1YxcUFXVktzd3R3WFpacGdHWmJmNjFaLzdIak9tWFJvSFdNIEwyMEZadyBHZzE2MFM1QUNDdkM3VFF5UVQzZkhNdUNGQzN2TDNjdnlDdDJBbEttMVFEUlZHVmgzbmtuNXpxRkhxVlpEcjN2RzNzRVNBcktxcjloc0NGU0diTms1M0JobnFWYlFta0NCRGUxT201aGJBamZsZWNlVXRLalRtOTV0eVg3MWRvZWVQVzBycGk1Ym1QWVZRPT0=", "V1ZaSFFnV1QyOWI4OEdFYyA3VjREeXRQb3Q4Nmo2Y2s5ZTdSNGtyNzRLOEJXd0FiaTRRS0E4NTZvQ0I5cnpzUzZmN3pUS1VaSE9CSG5ZelpCS2VDTFlkIHNFcm9QL2FWVlhpY0ltekRBY2xmSWJiTzJrSSAvaS95TExJQmxHaTZhamFRcGU5V2ZPc0t4ZkFTMVZCaDFXcmluRzFTbjJlVFM2TmpTT3U1ZkdiY09oUUVNM1kwNkU2NEJ4NlN4d0xNUE1vVEt2NEhxcURvMW5lVXlQdVV1Y1NZeFc2eDViVTdFL1Qycld6SklxRkFFRFJVU3QxMDM5WWR0czA2eURqeSBwQ0wvZ1REMDU5aEdiajlwTTlod1lhQklQNnFKWGRsd2IzZmdsVFJURm80aWdvcGhaR3o5ZnVBL3JacU9NOTZRMzRZMldVWVVnZHp2MHJrWXRzNzFBPT0=", "UTBFa1cyT3Y1WlhBYkF4YTRZRHNYa1pCaFdWa25NL1JxeVpLOW5rRnEycU9sUC9YTktnUHMyUTNMMUNFcHZrVnFTWXcvMExiQkgxcEVTUllZeGpGckt0V3o2ayBKUTkzQ1dETVcvOEhWZ3U0RWRJS3JTb3NpTHZNems3WHBUbWZhQWxSTkNCUmRXTC9aaVRjSnJyalJsajE3WUlOdkx6SGVSM0sgcjByeUh3eTIyTXIvc3NPVDR0Sm1FbDRPIFYzNTNSR2tCMXNrckMvbi9HdERQc0FSTzlhRVZMMWNhcEFJSFgwc1lENzlYa2lIVmJKUC9GOXJwRkFNN1cgMlBHdkNKIDYwdXlaOUhIeWFxWEpWc2pwMzVNVzQyekg3bTNpenpoMml3cWJHdU95dHp1S0lkWnc4SkliZEhBeEQ5MndoN3c5d3BqclRmNmdaNW83bVhKbmpnPT0=", "WFMwYmRFQ2NGbkR3N3RRS3RGczN5ZFp1Y01vd0dNcEhwIHNUUk5uanY4TFRCbjhSVG0yUFptSFhvWGh2N1dGQlQ4ZWVPeW9DMjFQSjVOOW9xMFEzdnJsWFJFUWxWeVJHbVNSSFN5V2JWWFoxUHRqN3QwYW96QWx3c3ZTYmdyQXl6ZnZ6QUVzcy9uQmlyOG03ZDlmRGFuaTFnZGNMdzd1cHZ4UU1vVDRMZTFtMURPZE4zVDBGT2UyNyBpd2ZGekpadFZhZ2JYOS8vc041VzZGVzF5eDVHWjRvNCBBRXdFIDA2anNNenAvc1pnMkt0aFZvM2tsQW03Z2NHNEd5eUdRRE1BbiAwS1JDVkZLb2tMQkxmeDEwU2hPZ1pqU0dTeDBuakp1RjZ2dE9lazRBc1M5TVFHL0ZFRFdUaXZZNVBOb1RDVFY3T1k4VG56WENQSWxrbnNqbTh3PT0=", "SHFFWkxmSi9CN1pyIFJ0VCA0YmxwMVkvIFY4QWhaa2xDMUdYVzdEMmFWT1BVbUJIWC9hYXhYN1dTcmJmQ3Q2aHdZaVZjNGZ0RFJEUUlYTVNLUmpEV3gzc2QwMGRPTGNwR1h4YWJmaHI5V2RXWEZuYnpOd1ZOS0pHQXk3Ynk1NHZ2czZ6VkRDTDZNaHJmTCByQnRNSXlwTUhvdzVrUXpOV2xLSnhTeG5wNmVLWUxaMUNaYmRiWDgzNTJCcjhVNVFxYzJjS1RDTEYzRnJnanBQUXIwMFB3cnlndVBEOEggMjIxcjk3Mk5WL2RwUHF3blBNN21VV1h6UTc2eEEwcUhLZlhCRDNHR1RCc1BMIDgyU0w3eldvL2VRYmFsbkx5IEZBQ1BwZFRpdDBiYjdyazJvdkp1b25tOElOIG8wN1J2TFhSWUpKZy9DMFFneEJHTUdwTXRGT2dRPT0=", "QlRMVnpXcGhjbWkybW90R1JCMFQ3ZmlvSXdiTGdweE56UFRrUndkcWNjSHJPRjRaVWNWYkJkZUhzRFJWTFRvbHBZS0ZpOUZMUUZ2OFF5WGxNWER2RXJLREY2THV6M0kweVBFUDVNaElzRlZrakVqRllubXdoUFMycFhhUmROQ3hDQzJmU01UIG9wR1hqaVRuRE1wbjBGbDRObnkxenliVElrcUdIRmxkQWZ4WlEzSHIwdzlDT203Znc5N0ZaV05QcFp5IFZvTmhpRHp2WTNxbWdYRnFhTGhIMXY3OEtud1pLQ3ZiRlVramgxSW5XWXB5QlBFRVpQdklrYUYvVlBCN25jSW15eEdYaVdzeUNxekYxbHp0UnpnSGFKcGw2ZyBhbXBnODNpaDBBNktMb2d6ZU9EcVE5SGxKSkRXcUo5YUZFQUI4bnlIOEtLN1R4OWk5R0M5S25BPT0=", "bncyUEFBTmRwR1FkdWk5SyBYVTZZQTNpZE5Gb0hhYlROeWlmYks1QjEgQmFsR2dRRW1KOU1EMWJKUy9CRm9TR0g4cXZPeWl3N1ovbmN6UUl4dFpEcFUydHYzTTgwTFEvMFREbzZQZTlTc1pUTUhCUWRUMzlQUENkbkVpUTcvZUFOU1FGbExLdXNINjdaVlpuOEhpNVBvNnVCaUxmQXFZcm9MeVdsL0FSSjF1aEhIV3VoV29IZVFoVGJQQllQSEJzejZOWFF2aHlZQ0p0RE41TXA1Z0lsRUFxZ3lyMHd5TWtFNjFHVjQvSGlDWEdCOXI0RSB0ZTR2Z3QyU1ZoY3ZOaHhpd3RIZU4wTXM4a1ozYzRJNE5haFFSYmtoeXdNNlBadDZNOVRnV244UkVEbnpDMHRId3l3cHJ2elM2TS94d0Y2T2tIa204RjVwTXYwNU1vcXVhM0d3PT0=", "bEFVQXUzakQ2RkljZG5YUHp1RzJzNyBKWC9jMENDUHVmc2ggRVNGdldaaXk0bVMyL2o1ZEhKR0VBZ053TVNDbHR4Nk4ybzBaNUEzNnBiNHJTbS9qbi90S3ZMQVkwOC9pIG9WUiA1UTZSRXN4V1dOR25XRzNheGtpNDR1amRtcUMyQ25RamNKMms2RHlZSUoyIDhXazBKNTBMaSBxL2s1a1NrT25xTWZPbjQ0TzEgMW5GdDdnbFkzb1lPd2xDa1g2anZKMHpZMUhqemlwIFhTUFhHZ0lqIFBzT0FSRWQ2aEFBVkZBR1RZSDA1WXV0RmtvUkVnd0xGTVhzejlQdWE4ZTQvdWJ2TVNVajJlMWU3YXFFaHJRaE1qSWVoWU1wZzVURFlIdko1azR4MXE3ZDYvcHogZkpia3U2RFhKc2o5RldaSUM0NWs5WTFxeFBGUEd4V3MvN1VnPT0=", "bDFCZmJzcHZVNVQvemdzTkVkc0ogaERQUDlJQzRaaFFMb3BWcXNCa0VBRXNzeW1SMHhSeWFvQ0dQSHRZVGNxNi9VUWZMc0ZVYmpZTVBBOUVubWlEL0kwIHF4bjB6ZnhzbUlZMThaQmFxV2tNZzRHeXp0ZndoNllxWE90WHBGVXJ0YU9KNXhKM2hkcyAgVkVIZmtKZnIwR2VydVgyNGM2ZVVMTnBuOG1aN25oUjh6aFg3dG9idGVxdHpzRGRwejVrMWdyVjFjdVhUUmkwZHAySndSZXNiQi9ub0RjMHMxYmRHdDRuSGdpWGNzMURmcHpOTEpQcFJ1Q3dXMldRa1pEeUYgL09PTWRGUzJCdGNEZG5vUjlwR3RVR2did253d24xVUJCT3MxM0tPU3Q5MWNETlVMQlV4akZObXRCdFRvSXN1ZU1FSHRxdlFERmxHc1VIc3d2cGt3PT0=", "RkJQT1lRSXViTDhuaG4zZTRFVnQyZkk4eEw1NkVmd3BiWWFTdkMwRHJoUVJYVUtqWVlzNjcxMk5MMmxwbkNiQzVuNXI2IG55SG9veWl4SXUgdEtJUzJaTE9aUHlPWFpiTEUzalpPWXc0aEY4Slh1WVJGNHc2NUhFQ2Q3Mnk3Sm1KbHhjcWNHdnBxRHBvSmF5engySkt2cnJRSVhZS3hwTFNWWWR2RjRET2VUalJGZnRQV0cxWi9ua2pZdEM0T1JWcGpuWjhNUXFxM1J1N1l1VjhBaW1ENzRNdnl1Y2pKcUx0OFRrOXVOa3JJNldQMDNwQ1F4SGVXaFoxaG1aS1JzaURPblFXOXpTMG9wanRZUGxQdllCS0NCZHJSQmxGcElWQm83ckhJRnJmV25JbUs3b2MzU2sxQmFGL2VqdFRjYlZTNUtzUnNCcm9jbW1yeEJqU1ZQQWJnPT0=", "Y2swanh3RGhpc1FRcnBiOGJRYy92U3dGUkxBekpGeGNHNWZOIHlqTnhpOFA0eVBkNDkvV1FCOWRMMzZzZyBOZzBPMEx1NWc5RjNBVkxINjFKYWgyRzZoOXBIYlhjQ0VYSkRIeGVvQ3F0RUxjQkczNktkdjdLMTdKTi9rLzMxYW84NXBFL25jY2Z6TnV1MGp0QW5JSnBvM296MHdTejdrRTR0eGgwWFlOUmF5TmZjYmkveE00Uk53bUp1bjdkSnpNOXV3c1VFUkpBZjYgYU1jaDFwa2YvRWZBem8xb3NSWDUyTldNL1gzd2tkbHJQc0FreW8wb1F2VlJybHliREV4OWZFckZDbnZLaXlubDYgRFRURmhhcUZwYnI4WFNJIExIdmN1VGE3ZlpCd044QjhyIDJSakhSejlqUklQYnJqcGlQQVR4WGogaXhCemxHMVBYZUZkeGlRPT0=", "aURQNEIxMnJ6S0xmbHRaZXVhTVBqRVRNeDZJckFScWxrbnpzYmpmRkFDdEZodlRxQyAyT1dOVXJIVmg3STQ4NWJpUCBwbFFRaGJQYiBRbHZNL1lwdE40Wm9uMFRiT2VkYnpoemNPYTZ0d2xtRkMwbWlvclUyeU1VQ2RpVk1HZENrIDV0UyBsSWhibEhWaVIwSU9EcmpFSUxnaWV0a2UyVUxrWllYc3VPZWFldyA3VUExTyBUa3RNd2M1N0dRY0l4SGJWT2NxeVQ3T084ZFVIcUFZWVVCQyBOTlNoRGxYRUdzak5od2xDIHQ4cjhINDZ4UmR3dUtxbnVhb3ZBZUVMaVI2QzUyd05KOWdIY0dYekx3NjdEb1hJbzdvUHBYT1VsZndwcVMvY0Zwemt0ZnE2WENrVGd4ZVltOGhocVlLTmNTSGhXOVZtdmhZajE3R0pkZFEvb2ZRPT0="]
    assert {:ok, _stone, _} = StoneDecrypt.decrypt(encrypted_stone)
  end
end
